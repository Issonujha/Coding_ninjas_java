import java.util.*;

public class Solution {
	/*
	 * BinaryTreeNode class
	 * 
	 * class BinaryTreeNode<T> 
	 * { 
	 * 		T data; 
	 * 		BinaryTreeNode<T> left; 
	 * 		BinaryTreeNode<T> right;
	 *		public BinaryTreeNode(T data) 
	 *		{
	 *  		this.data = data; 
	 *  	} 
	 *  }
	 */
	/*
	 * LinkedListNode Class
	 * class LinkedListNode<T> 
	 * { 
	 * 		T data; 
	 * 		LinkedListNode<T> next;
	 * 		public LinkedListNode(T data) 	
	 * 		{
	 *  		this.data = data; 
	 *  	} 
	 *  }
	 */
	public static ArrayList<LinkedListNode<Integer>> constructLinkedListForEachLevel(BinaryTreeNode<Integer> root){
		// Write your code here
        if (root==null) return null;
        Queue<BinaryTreeNode<Integer>> queue = new LinkedList<>();
        ArrayList<LinkedListNode<Integer>> arrayList = new ArrayList<>();
        queue.add(root);
        queue.add(null);
        LinkedListNode<Integer> head = new LinkedListNode<>(-1),tail = head;
        while (!queue.isEmpty()){
            if (queue.peek()==null){
                arrayList.add(head.next);
                queue.add(queue.poll());
                if (queue.peek()==null) return arrayList;
                head = new LinkedListNode<>(-1);
                tail = head;
                continue;
            }
            if (queue.peek().left!=null) queue.add(queue.peek().left);
            if (queue.peek().right!=null) queue.add(queue.peek().right);
            tail.next = new LinkedListNode<>(queue.peek().data);
            tail = tail.next;
            queue.poll();
        }
        return arrayList;
    }
}