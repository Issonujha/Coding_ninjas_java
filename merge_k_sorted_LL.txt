import java.util.PriorityQueue;
import java.util.Comparator;
import java.util.ArrayList;
public class Solution {

	public static ArrayList<Integer> mergeKSortedArrays(ArrayList<ArrayList<Integer>> input) {
        //method 1 : Tc = o(k*nlog(k*n))
        // PriorityQueue<Integer> pq = new PriorityQueue<>();
        // ArrayList<Integer> ans = new ArrayList<>();
        // for(int i=0 ; i < input.size() ; i++){
        //     ArrayList<Integer> temp = input.get(i);
        //     for(int j = 0 ; j < temp.size() ; j++){
        //         pq.add(temp.get(j));
        //     }
        // }
        // while(!pq.isEmpty()){
        //     ans.add(pq.remove());
        // }
        // return ans;
        
        //Method 2 : best approach 
        minTripletComparator tripletComparator = new minTripletComparator();
        PriorityQueue<Triplet> pq = new PriorityQueue<>(tripletComparator);
        ArrayList<Integer> ans = new ArrayList<>();
        for(int i=0 ; i < input.size() ; i++){
            Triplet currElem = new Triplet(input.get(i).get(0), i,0);
            pq.add(currElem);
        }
        
        while(!pq.isEmpty()){
            Triplet temp = pq.remove();
            ans.add(temp.value);
            int index = temp.elemIndex + 1;
            if(index < input.get(temp.arrayIndex).size()){
                Triplet currElem = new Triplet(input.get(temp.arrayIndex).get(index),temp.arrayIndex,index);
                pq.add(currElem);
            }   
        }
        return ans;
	}

}
class Triplet{
    int value;
    int elemIndex;
    int arrayIndex;
    public Triplet(int value, int arrayIndex, int elemIndex){
        this.value = value;
        this.arrayIndex = arrayIndex;
        this.elemIndex = elemIndex;
    }
}

class minTripletComparator implements Comparator<Triplet>{
    @Override
    public int compare(Triplet o1, Triplet o2) {
        if(o1.value < o2.value){
            return -1;
        }else if(o1.value > o2.value){
            return 1;
        }else{
            return 0;
        }
    }
}
