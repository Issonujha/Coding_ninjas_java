import java.util.*;
public class Solution {
    
	public static int countBracketReversals(String input) {
		//Your code goes here
        int len = input.length();
 
        // length of expression must be even to make
        // it balanced by using reversals.
        if (len % 2 != 0)
            return -1;
 
        // After this loop, stack contains unbalanced
        // part of expression, i.e., expression of the
        // form "}}..}{{..{"
        Stack<Character> s = new Stack<>();
 
        for(int i = 0; i < len; i++) {
            char c = input.charAt(i);
            if (c == '}' && !s.empty()) {
                if (s.peek() == '{')
                    s.pop();
                else{
                    // System.out.println(c);
                    s.push(c);
                }
            }
            else{
                // System.out.println(c);
                s.push(c);
            }
        }
 
        // Length of the reduced expression
        // red_len = (m+n)
        int red_len = s.size();
 
        // count opening brackets at the end of
        // stack
        int n = 0;
        char c1 = ' ';
        char c2 = ' ';
        while (!s.empty()) {
            // s.pop();
            // n++;
            for(int i = 0; i<1; i++) {
                c1 = s.pop();
                c2 = s.pop();
            }
            // System.out.println(c1 + " " + c2);
            if(c1 == c2) {
                n = n+1;
            }
            else {
                n +=2;
            }
        }
        // return (red_len / 2 + n % 2);
        return n;
    }
}