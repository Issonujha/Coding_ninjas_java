
// /* Signature of four required functions is given in the code. You can create other functions as well if you need.
// *  Also you should submit your code even if you are not done with all the functions. 
// */

// // Main used internally is shown here just for your reference.
// /*public static void main(String[] args) {
// 		Scanner s = new Scanner(System.in);
// 		int n = s.nextInt();
// 		int degree1[] = new int[n];
// 		for(int i = 0; i < n; i++){
// 			degree1[i] = s.nextInt();
// 		}
// 		int coeff1[] = new int[n];
// 		for(int i = 0; i < n; i++){
// 			coeff1[i] = s.nextInt();
// 		}
// 		Polynomial first = new Polynomial();
// 		for(int i = 0; i < n; i++){
// 			first.setCoefficient(degree1[i],coeff1[i]);
// 		}
// 		n = s.nextInt();
// 		int degree2[] = new int[n];
// 		for(int i = 0; i < n; i++){
// 			degree2[i] = s.nextInt();
// 		}
// 		 int coeff2[] = new int[n];
// 		for(int i = 0; i < n; i++){
// 			coeff2[i] = s.nextInt();
// 		}
// 		Polynomial second = new Polynomial();
// 		for(int i = 0; i < n; i++){
// 			second.setCoefficient(degree2[i],coeff2[i]);
// 		}
// 		int choice = s.nextInt();
// 		Polynomial result;
// 		switch(choice){
// 		// Add
// 		case 1: 
// 			 result = first.add(second);
// 			result.print();
// 			break;
// 		// Subtract	
// 		case 2 :
// 			 result = first.subtract(second);
// 			result.print();
// 			break;
// 		// Multiply
// 		case 3 :
// 			 result = first.multiply(second);
// 			result.print();
// 			break;
// 		}

// 	}
//   */


public class Polynomial {
    
    private int data[]; //For new data array where data is stored and it is private.
	private int nextIndex;//We have to know what is the index where to store and is private.
	
	public Polynomial() {
		data = new int[1];
		nextIndex = 0;
	}
    
	/* This function sets coefficient for a particular degree value, if degree is not there in the polynomial
	 *  then corresponding term(with specified degree and value is added int the polynomial. If the degree
	 *  is already present in the polynomial then previous coefficient is replaced by
	 *  new coefficient value passed as function argument
	*/
	public void setCoefficient(int degree, int coeff){
    	if(degree > this.data.length - 1)
    	{
    	int temp[] = data;
    	data = new int[degree + 1];
    	for(int i = 0; i < temp.length; i++)
    	{
    	data[i] = temp[i];
    	}
    	data[degree] = coeff;
    	}
    	else
    	{
    	data[degree] = coeff; 
    	}
	}
    
    public void reconstruct(int degree) {
        
        int temp[] = data;
        data = new int[degree+1];
        for(int i=0; i<temp.length;i++) {
            data[i] = temp[i];
        }
    }
	
    
	// Prints all the terms(only terms with non zero coefficients are to be printed) in increasing order of degree.
	public void print(){
        for(int i=0; i<data.length;i++) {
            if(data[i]==0) {
                continue;
            }
            System.out.print(data[i]+"x"+(i)+" ");
        }
        System.out.println();
	}
    
	// Adds two polynomials and returns a new polynomial which has result
	public Polynomial add(Polynomial p){
        Polynomial n = new Polynomial();
        int length1 = (this.data).length;
        int length2 = (p.data).length;
        for(int i=0; i<length1;i++) {
            
            if(i>=length2) {
                int k = i;
                n.setCoefficient(k, this.data[i]);
            }
            for(int j=0; j<length2;j++) {
                if(i==j) {
                    int k = j;
                    int sum = this.data[i] + p.data[j];
                    n.setCoefficient(k, sum);
                }
                if(j>=length1) {
                    int k = j;
                    n.setCoefficient(k, p.data[j]);
                }
            }
        }
        
      return n; 
    
	}
	
    
	// Subtracts two polynomials and returns a new polynomial which has result
	public Polynomial subtract(Polynomial p){
        Polynomial n = new Polynomial();
        int length1 = (this.data).length;
        int length2 = (p.data).length;
        int l = Math.min(length1, length2);
        int i = 0;
        for(i=0; i<l;i++) {
        	n.setCoefficient(i, this.data[i]-p.data[i]);
    	}
        while(i<length1) {
        	n.setCoefficient(i, this.data[i]);
            i++;
    	}
        while(i<length2) {
        	n.setCoefficient(i, -p.data[i]);
        	i++;
        }
    	return n;
	}
    
	// Multiply two polynomials and returns a new polynomial which has result
	public Polynomial multiply(Polynomial p){
		Polynomial mul = new Polynomial();
        
        int length1 = (this.data).length;
        int length2 = (p.data).length;
        int degree = (length1-1)+(length2-1);
        int multiply[] = new int[degree];
        int k = 0;
        int multi = 1;
        int sum[] = new int[length1*length2];
        for(int i = 0; i < length1; i++) {
            for(int j = 0; j < length2; j++) {
            	multi = this.data[i]*p.data[j];
                sum[i+j] = sum[i+j] + multi;
            	mul.setCoefficient(i + j, sum[i+j]);
            }
        }
        return mul;
    }
}