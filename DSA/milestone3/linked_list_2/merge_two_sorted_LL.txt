/*

    Following is the Node class already written for the Linked List

    class LinkedListNode<T> {
        T data;
        LinkedListNode<T> next;
    
        public LinkedListNode(T data) {
            this.data = data;
        }
    }

*/

// public class Solution {
    
//     public static LinkedListNode<Integer> mergeTwoSortedLinkedLists(LinkedListNode<Integer> head1, LinkedListNode<Integer> head2) {
//         //Your code goes here
//         if(head1==null) {
//             return head2;
//         }
//         if(head2==null) {
//             return head1;
//         }
//         if(head1.data<head2.data) {
//             head1.next = mergeTwoSortedLinkedLists(head1.next, head2);
//             return head1;
//         }
//         else {
//             head2.next = mergeTwoSortedLinkedLists(head1, head2.next);
//             return head2;
//         }
//     }

// }


public class Solution {
    
    public static LinkedListNode<Integer> mergeTwoSortedLinkedLists(LinkedListNode<Integer> head1, LinkedListNode<Integer> head2) {
        //Your code goes here
       if(head1==null) {
           return head2;
       }
        if(head2==null) {
            return head1;
        }
        LinkedListNode<Integer> head = head1;
        LinkedListNode<Integer> tail = head1;
        if(head1.data<=head2.data) {
            head = head1;
            tail = head;
            head1 = head1.next;
        }
        else {
            head = head2;
            tail = head;
            head2 = head2.next;
        }
        while(head1!=null && head2!=null) {
        	if(head1.data<head2.data) {
                tail.next = head1;
                tail = tail.next;
                head1 = head1.next;
            }
            else if(head1.data>head2.data) {
                tail.next = head2;
                tail = tail.next;
                head2 = head2.next;
            }
            else {
                tail.next = head2;
                tail = tail.next;
                head2 = head2.next;
            }
        }
        if(head1!=null) {
            tail.next = head1;
        }
        if(head2!=null) {
            tail.next = head2;
        }
        return head;
    }

}