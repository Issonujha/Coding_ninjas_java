/*

    Following is the Node class already written for the Linked List

    class LinkedListNode<T> {
        T data;
        LinkedListNode<T> next;
    
        public LinkedListNode(T data) {
            this.data = data;
        }
    }

*/
class Pair
{
    LinkedListNode<Integer> head;
    LinkedListNode<Integer> tail;
}
public class Solution {

public static Pair reverse(LinkedListNode<Integer> head)
{
    if (head == null || head.next == null)
    {
        Pair ans;
        ans.head = head;
        ans.tail = head;
        return ans;
    }
    Pair smallAns = reverse(head.next);
    smallAns.tail.next = head;
    head.next = null;
    Pair ans;
    ans.head = smallAns.head;
    ans.tail = head;
    return ans;
}
public static LinkedListNode<Integer> kReverse(LinkedListNode<Integer> head, int k)
{
    if (head == null)
    {
        return head;
    }
    if (k == 0 || k == 1)
    {
        return head;
    }

    LinkedListNode<Integer> temp = head;
    int count = 0;
    while (temp != null && count != k - 1)
    {
        temp = temp.next;
        count++;
    }
    LinkedListNode<Integer> head2 = null;
    if (temp != null)
    {
        head2 = temp.next;
        temp.next = null;
    }
    LinkedListNode<Integer> newHead = kReverse(head2, k);
    Pair ans = reverse(head);
    ans.tail.next = newHead;
    return ans.head;
}

	// public static LinkedListNode<Integer> kReverse(LinkedListNode<Integer> head, int k) {
	// 	//Your code goes here
	// }
   

}
