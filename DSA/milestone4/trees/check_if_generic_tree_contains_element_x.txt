public class Solution {

/*	TreeNode class 
 * 
 * class TreeNode<T> {
		T data;
		ArrayList<TreeNode<T>> children;

		TreeNode(T data){
			this.data = data;
			children = new ArrayList<TreeNode<T>>();
		}
	}*/
	
	public static boolean checkIfContainsX(TreeNode<Integer> root, int x){

		// Write your code here
// 		QueueUsingLL<TreeNode<Integer>> queue = new QueueUsingLL<TreeNode<Integer>> ();
//         queue.enqueue(root);
//         int count = 0;
//         while(!queue.isEmpty()) {
//             int n = queue.size();
//             while(n>0) {
//                 try {
//                 TreeNode<Integer> ele = queue.dequeue();
//                 if(ele.data==x) {
//                     return true;
//                 }
//                 int i = 0;
//                 for(; i<ele.children.size(); i++) {
//                     queue.enqueue(ele.children.get(i));
//                 }
//                 n--;
//                 }
//                 catch (QueueEmptyException e) {
                    
//                 }
//             }
//         }
//         return false;
        boolean b = false;
        if(root.data==x) {
            return true;
        }
        for(int i = 0; i<root.children.size(); i++) {
            b = checkIfContainsX(root.children.get(i), x);
            if(b==true) {
                return true;
            }
        }
        return b;
	}
	
}
