public class Solution {

	/*	TreeNode structure 
	 * 
	 * class TreeNode<T> {
		T data;
		ArrayList<TreeNode<T>> children;

		TreeNode(T data){
			this.data = data;
			children = new ArrayList<TreeNode<T>>();
		}
	}*/

	public static int getHeight(TreeNode<Integer> root){
		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
		 * Taking input and printing output is handled automatically.
		 */
//         QueueUsingLL<TreeNode<Integer>> queue = new QueueUsingLL<TreeNode<Integer>> ();
//         queue.enqueue(root);
//         int count = 0;
//         while(!queue.isEmpty()) {
//             int n = queue.size();
//             while(n>0) {
//                 try {
//                 TreeNode<Integer> ele = queue.dequeue();
//                 for(int i = 0; i<ele.children.size(); i++) {
//                     queue.enqueue(ele.children.get(i));
//                 }
//                 n--;
//                 }
//                 catch (QueueEmptyException e) {
                    
//                 }
//             }
//             count++;
//         }
//         return count;
        if(root==null) {
            return 0;
        }
        int height = 1;
        int l = 0;
        for(int i = 0; i<root.children.size(); i++) {
            int all = getHeight(root.children.get(i));
            if(l<all) {
                l = all;
            }
        }
        height += l;
        return height;
	}

}