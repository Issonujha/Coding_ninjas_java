/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/

public class Solution {

	public static void printLevelWise(BinaryTreeNode<Integer> root) {
		//Your code goes here
        if(root==null) {
            return;
        }
        QueueUsingLL<BinaryTreeNode<Integer>> queue = new QueueUsingLL<BinaryTreeNode<Integer>>();
        queue.enqueue(root);
        while(!queue.isEmpty()) {
            BinaryTreeNode<Integer> node = null;
            try{
            	node = queue.dequeue();
            }catch (QueueEmptyException e) {
                //Not come here
            }
            String s = node.data + ":";
            if(node.left!=null) {
                s += "L:"+node.left.data+",";
                queue.enqueue(node.left);
            }
            if(node.left==null) {
                s += "L:-1,";
            }
            if(node.right!=null) {
                s += "R:" + node.right.data;
                queue.enqueue(node.right);
            }
            if(node.right==null) {
                s += "R:-1";
            }
            System.out.println(s);
        }
	}
	
}