/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/

public class Solution {
    static int pI = 0;
	public static BinaryTreeNode<Integer> buildTree(int[] preOrder, int[] inOrder, int sI, int eI) {
        // System.out.println(pI);
       	if(sI>eI) {
            return null;
        }
        int e = eI;
        for(int i = sI; i<=eI; i++) {
            if(inOrder[i] == preOrder[pI]) {
                e = i;
            }
        }
        BinaryTreeNode<Integer> root = new BinaryTreeNode<Integer>(preOrder[pI++]);
        if(sI==eI) {
            return root;
        }
        root.left = buildTree(preOrder, inOrder, sI, e-1);
        root.right = buildTree(preOrder, inOrder, e+1, eI);
        return root;
    }
	public static BinaryTreeNode<Integer> buildTree(int[] preOrder, int[] inOrder) {
		//Your code goes here
        BinaryTreeNode<Integer> root = buildTree(preOrder, inOrder, 0, inOrder.length-1);
        
       	return root; 
	}

}