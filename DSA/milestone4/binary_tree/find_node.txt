/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/

public class Solution {

	public static boolean isNodePresent(BinaryTreeNode<Integer> root, int x) {
	    //Your code goes here
        // if(root==null) {
        //     return false;
        // }
        // if(root.data==x) {
        //     return true;
        // }
        // boolean b = false;
        // if(root.left!=null) {
        //     b = isNodePresent(root.left, x);
        // }
        // if(b==true) {
        //     return b;
        // }
        // if(root.right!=null) {
        //     b = isNodePresent(root.right, x);
        // }
        // if(b==true) {
        //     return b;
        // }
        // return b;
        if(root==null) {
            return false;
        }
        QueueUsingLL<BinaryTreeNode<Integer>> queue = new QueueUsingLL<BinaryTreeNode<Integer>>();
        queue.enqueue(root);
        boolean b = false;
        while(!queue.isEmpty() && b!=true) {
            BinaryTreeNode<Integer> node = null;
            try {
            node = queue.dequeue();
            } catch(QueueEmptyException e) {
                //Not come here
            }
            if(node.data==x) {
                b = true;
                break;
            }
            if(node.left!=null) {
                queue.enqueue(node.left);
            }
            if(node.right!=null) {
                queue.enqueue(node.right);
            }
        }
        return b;
	}

}