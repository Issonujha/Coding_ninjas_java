/*
 * Binary Tree Node class
 * 
 * class BinaryTreeNode<T> { 
 * 		T data; 
 * 		BinaryTreeNode<T> left; 
 * 		BinaryTreeNode<T> right;
 * 		public BinaryTreeNode(T data) 
 * 		{ 
 * 			this.data = data; 
 * 		}
 * }
 */

 /* 
 * Main Method being used internally
 *	public static void main(String[] args) throws IOException {
 *		BinarySearchTree bst = new BinarySearchTree();
 *		int choice, input;
 *		int q = Integer.parseInt(br.readLine());
 *		while (q-- > 0) {
 *			st = new StringTokenizer(br.readLine());
 *			choice = Integer.parseInt(st.nextToken());
 *			switch (choice) {
 *			case 1:
 *				input = Integer.parseInt(st.nextToken());
 *				bst.insert(input);
 *				break;
 *				case 2:
 *				input = Integer.parseInt(st.nextToken());
 *				bst.remove(input);
 *				break;
 *			case 3:
 *				input = Integer.parseInt(st.nextToken());
 *				System.out.println(bst.search(input));
 *				break;
 *			default:
 *				bst.printTree();
 *				break;
 *			}
 *		}
 *	}
 */
public class BinarySearchTree {
    private BinaryTreeNode<Integer> root;
    
    public BinaryTreeNode<Integer> insert(int data, BinaryTreeNode<Integer> root) {
        if(root==null) {
            BinaryTreeNode<Integer> newNode = new BinaryTreeNode<Integer>(data);
        	newNode.left = null;
            newNode.right = null;
            return newNode;
        }
        if(data<=root.data) {
            root.left = insert(data, root.left);
            return root;
        }
        if(data>=root.data) {
            root.right = insert(data, root.right);
            return root;
        }
        return root;
    }
    
	public void insert(int data) {
		//Implement the insert() function
        root = insert(data, root);
	}
    public static BinaryTreeNode<Integer> maximum(BinaryTreeNode<Integer> root) {
        if(root.left==null && root.right==null) {
            return root;
        }
        return maximum(root.right);
    }
    public static BinaryTreeNode<Integer> minimum(BinaryTreeNode<Integer> root) {
        if(root.left==null && root.right==null) {
            return root;
        }
        return maximum(root.left);
    }
	private BinaryTreeNode<Integer> remove(int data, BinaryTreeNode<Integer> root) {
        if(root==null) {
            return null;
        }
        if(root.data==data) {
            if(root.left==null && root.right==null) {
                return null;
            }
            if(root.left==null) {
                this.root = root.right;
                return root;
            }
            if(root.right==null) {
                BinaryTreeNode<Integer> newRoot = root.left;
                this.root = newRoot;
                // printTree(newRoot);
                return root;
            }
            else {
                
                BinaryTreeNode<Integer> data1 = minimum(root.right);
                BinaryTreeNode<Integer> data2 = root.left;
                this.root = root.right;
                this.root.left = data2;
                return root;
            }
        }
        else if(data<root.data) {
            root.left = remove(data, root.left);
            return root;
        }
        else if(data>root.data) {
            root.right = remove(data, root.right);
            return root;
        }
        return root;
    }
	public void remove(int data) {
		//Implement the remove() function
    	remove(data, root);
	}
	
    private void printTree(BinaryTreeNode<Integer> root) {
        if(root==null) {
            return;
        }
        String s = "";
        s += root.data +":";
        if(root.left!=null) {
            s += "L:"+ root.left.data + ",";
        }
        if(root.right!=null) {
            s += "R:"+ root.right.data;
        }
        System.out.println(s);
        if(root.left!=null) {
            printTree(root.left);
        }
        if(root.right!=null) {
            printTree(root.right);
        }
    }
    
	public void printTree() {
		//Implement the printTree() function
        printTree(root);
	}
	
    
    private boolean search(int data, BinaryTreeNode<Integer> root) {
        if(root==null) {
            return false;
        }
        if(root.data==data) {
            return true;
        }
        if(data<root.data) {
            return search(data, root.left);
        }
        if(data>root.data) {
            return search(data, root.right);
        }
        return false;
    }
    
	public boolean search(int data) {
		//Implement the search() function
        return search(data, root);
	}
	

}
